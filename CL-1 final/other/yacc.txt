Created by PLY version 3.4 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> P
Rule 1     P -> E
Rule 2     E -> E PLUS T
Rule 3     E -> T
Rule 4     T -> T TIMES F
Rule 5     T -> F
Rule 6     F -> LPAREN E RPAREN
Rule 7     F -> NUMBER

Terminals, with rules where they appear

LPAREN               : 6
NUMBER               : 7
PLUS                 : 2
RPAREN               : 6
TIMES                : 4
error                : 

Nonterminals, with rules where they appear

E                    : 1 2 6
F                    : 4 5
P                    : 0
T                    : 2 3 4

Parsing method: SLR

state 0

    (0) S' -> . P
    (1) P -> . E
    (2) E -> . E PLUS T
    (3) E -> . T
    (4) T -> . T TIMES F
    (5) T -> . F
    (6) F -> . LPAREN E RPAREN
    (7) F -> . NUMBER

    LPAREN          shift and go to state 6
    NUMBER          shift and go to state 3

    P                              shift and go to state 4
    E                              shift and go to state 1
    T                              shift and go to state 5
    F                              shift and go to state 2

state 1

    (1) P -> E .
    (2) E -> E . PLUS T

    $end            reduce using rule 1 (P -> E .)
    PLUS            shift and go to state 7


state 2

    (5) T -> F .

    $end            reduce using rule 5 (T -> F .)
    PLUS            reduce using rule 5 (T -> F .)
    TIMES           reduce using rule 5 (T -> F .)
    RPAREN          reduce using rule 5 (T -> F .)


state 3

    (7) F -> NUMBER .

    $end            reduce using rule 7 (F -> NUMBER .)
    PLUS            reduce using rule 7 (F -> NUMBER .)
    TIMES           reduce using rule 7 (F -> NUMBER .)
    RPAREN          reduce using rule 7 (F -> NUMBER .)


state 4

    (0) S' -> P .



state 5

    (3) E -> T .
    (4) T -> T . TIMES F

    $end            reduce using rule 3 (E -> T .)
    PLUS            reduce using rule 3 (E -> T .)
    RPAREN          reduce using rule 3 (E -> T .)
    TIMES           shift and go to state 8


state 6

    (6) F -> LPAREN . E RPAREN
    (2) E -> . E PLUS T
    (3) E -> . T
    (4) T -> . T TIMES F
    (5) T -> . F
    (6) F -> . LPAREN E RPAREN
    (7) F -> . NUMBER

    LPAREN          shift and go to state 6
    NUMBER          shift and go to state 3

    E                              shift and go to state 9
    T                              shift and go to state 5
    F                              shift and go to state 2

state 7

    (2) E -> E PLUS . T
    (4) T -> . T TIMES F
    (5) T -> . F
    (6) F -> . LPAREN E RPAREN
    (7) F -> . NUMBER

    LPAREN          shift and go to state 6
    NUMBER          shift and go to state 3

    T                              shift and go to state 10
    F                              shift and go to state 2

state 8

    (4) T -> T TIMES . F
    (6) F -> . LPAREN E RPAREN
    (7) F -> . NUMBER

    LPAREN          shift and go to state 6
    NUMBER          shift and go to state 3

    F                              shift and go to state 11

state 9

    (6) F -> LPAREN E . RPAREN
    (2) E -> E . PLUS T

    RPAREN          shift and go to state 12
    PLUS            shift and go to state 7


state 10

    (2) E -> E PLUS T .
    (4) T -> T . TIMES F

    $end            reduce using rule 2 (E -> E PLUS T .)
    PLUS            reduce using rule 2 (E -> E PLUS T .)
    RPAREN          reduce using rule 2 (E -> E PLUS T .)
    TIMES           shift and go to state 8


state 11

    (4) T -> T TIMES F .

    $end            reduce using rule 4 (T -> T TIMES F .)
    PLUS            reduce using rule 4 (T -> T TIMES F .)
    TIMES           reduce using rule 4 (T -> T TIMES F .)
    RPAREN          reduce using rule 4 (T -> T TIMES F .)


state 12

    (6) F -> LPAREN E RPAREN .

    $end            reduce using rule 6 (F -> LPAREN E RPAREN .)
    PLUS            reduce using rule 6 (F -> LPAREN E RPAREN .)
    TIMES           reduce using rule 6 (F -> LPAREN E RPAREN .)
    RPAREN          reduce using rule 6 (F -> LPAREN E RPAREN .)

